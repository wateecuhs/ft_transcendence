# Generated by Django 5.1.1 on 2024-11-25 15:12

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "duration",
                    models.DecimalField(decimal_places=2, max_digits=5, null=True),
                ),
            ],
            options={
                "db_table": "tournaments",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=30,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        max_length=30,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Active"),
                            (2, "Inactive"),
                            (3, "Pending Activation"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        default="image/default_pp.png",
                        upload_to="avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_42_account", models.BooleanField()),
                ("avatar_path", models.CharField()),
                ("is_42_pp", models.BooleanField()),
                ("access_token", models.CharField()),
                ("refresh_token", models.CharField()),
                ("room_id", models.UUIDField(null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("matches_number", models.PositiveIntegerField(default=0)),
                ("matches_win", models.PositiveIntegerField(default=0)),
                ("matches_lose", models.PositiveIntegerField(default=0)),
                ("winrate", models.PositiveIntegerField(default=0)),
                ("goal_scored", models.PositiveIntegerField(default=0)),
                ("goal_conceded", models.PositiveIntegerField(default=0)),
                (
                    "friends",
                    models.ManyToManyField(
                        blank=True,
                        related_name="friend_of",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "tournament",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user",
                        to="api.tournament",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("user1_score", models.PositiveSmallIntegerField()),
                ("user2_score", models.PositiveSmallIntegerField()),
                (
                    "user1_status",
                    models.IntegerField(choices=[(1, "WIN"), (2, "LOSE")], default=1),
                ),
                (
                    "user2_status",
                    models.IntegerField(choices=[(1, "WIN"), (2, "LOSE")], default=1),
                ),
                (
                    "user1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="match_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="opponent_match_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "matches",
            },
        ),
    ]
